#
# nsd.conf -- the NSD(8) configuration file, nsd.conf(5).
#
# Copyright (c) 2001-2014, NLnet Labs. All rights reserved.
#
# See LICENSE for the license.
#

# This is a comment.
# Sample configuration file
# include: "file" # include that file's text over here.  Globbed, "*.conf"

# options for the nsd server
server:
	# Number of NSD servers to fork.  Put the number of CPUs to use here.
	server-count: 8

	# uncomment to specify specific interfaces to bind (default are the
	# wildcard interfaces 0.0.0.0 and ::0).
	# ip-address: 127.0.0.1
    ip-address: 192.168.0.1

	# Allow binding to non local addresses. Default no.
	# ip-transparent: no

	# enable debug mode, does not fork daemon process into the background.
	debug-mode: no

	# listen on IPv4 connections
	do-ip4: yes

	# listen on IPv6 connections
	do-ip6: yes

	# port to answer queries on. default is 53.
	# port: 53

	# Verbosity level.
	verbosity: 3

	# After binding socket, drop user privileges.
	# can be a username, id or id.gid.
	username: nsd

	# Run NSD in a chroot-jail.
	# make sure to have pidfile and database reachable from there.
	# by default, no chroot-jail is used.
	# chroot: "/etc/nsd"

	# The directory for zonefile: files.  The daemon chdirs here.
	zonesdir: "/etc/nsd"

	# the list of dynamically added zones.
	zonelistfile: "/var/lib/nsd/zone.list"

	# the database to use
	# if set to "" then no disk-database is used, less memory usage.
	database: "/var/lib/nsd/nsd.db"

	# log messages to file. Default to stderr and syslog (with
	# facility LOG_DAEMON).  stderr disappears when daemon goes to bg.
	logfile: "/var/log/nsd.log"

	# File to store pid for nsd in.
	pidfile: "/var/run/nsd.pid"

	# The file where secondary zone refresh and expire timeouts are kept.
	# If you delete this file, all secondary zones are forced to be
	# 'refreshing' (as if nsd got a notify).  Set to "" to disable.
	xfrdfile: "/var/lib/nsd/xfrd.state"

	# The directory where zone transfers are stored, in a subdir of it.
	# xfrdir: "/tmp"

	# don't answer VERSION.BIND and VERSION.SERVER CHAOS class queries
	hide-version: yes

	# identify the server (CH TXT ID.SERVER entry).
	identity: "unidentified server"

	# NSID identity (hex string, or "ascii_somestring"). default disabled.
	# nsid: "aabbccdd"

	# Maximum number of concurrent TCP connections per server.
	tcp-count: 100

	# Maximum number of queries served on a single TCP connection.
	# By default 0, which means no maximum.
	# tcp-query-count: 0

	# Override the default (120 seconds) TCP timeout.
	tcp-timeout: 30

	# Preferred EDNS buffer size for IPv4.
	# ipv4-edns-size: 4096

	# Preferred EDNS buffer size for IPv6.
	# ipv6-edns-size: 4096

	# statistics are produced every number of seconds. Prints to log.
	# Default is 0, meaning no statistics are produced.
	# statistics: 3600

	# Number of seconds between reloads triggered by xfrd.
	# xfrd-reload-timeout: 1

	# log timestamp in ascii (y-m-d h:m:s.msec), yes is default.
	# log-time-ascii: yes

	# round robin rotation of records in the answer.
	round-robin: yes

	# check mtime of all zone files on start and sighup
	# zonefiles-check: yes

	# write changed zonefiles to disk, every N seconds.
	# default is 0(disabled) or 3600(if database is "").
	# zonefiles-write: 3600

	# RRLconfig
	# Response Rate Limiting, size of the hashtable. Default 1000000.
	# rrl-size: 1000000

	# Response Rate Limiting, maximum QPS allowed (from one query source).
	# Default 200. If set to 0, ratelimiting is disabled. Also set
	# rrl-whitelist-ratelimit to 0 to disable ratelimit processing.
	# rrl-ratelimit: 200

	# Response Rate Limiting, number of packets to discard before
	# sending a SLIP response (a truncated one, allowing an honest
	# resolver to retry with TCP). Default is 2 (one half of the
	# queries will receive a SLIP response, 0 disables SLIP (all
	# packets are discarded), 1 means every request will get a
	# SLIP response.
	# rrl-slip: 2

	# Response Rate Limiting, IPv4 prefix length. Addresses are
	# grouped by netblock.
	# rrl-ipv4-prefix-length: 24

	# Response Rate Limiting, IPv6 prefix length. Addresses are
	# grouped by netblock.
	# rrl-ipv6-prefix-length: 64

	# Response Rate Limiting, maximum QPS allowed (from one query source)
	# for whitelisted types. Default 2000.
	# rrl-whitelist-ratelimit: 2000
	# RRLend

# Remote control config section.
remote-control:
	# Enable remote control with nsd-control(8) here.
	# set up the keys and certificates with nsd-control-setup.
	control-enable: yes

	# what interfaces are listened to for control, default is on localhost.
	control-interface: 127.0.0.1
	# control-interface: ::1

	# port number for remote control operations (uses TLS over TCP).
	control-port: 8952

	# nsd server key file for remote control.
	# server-key-file: "/etc/nsd/nsd_server.key"

	# nsd server certificate file for remote control.
	# server-cert-file: "/etc/nsd/nsd_server.pem"

	# nsd-control key file.
	# control-key-file: "/etc/nsd/nsd_control.key"

	# nsd-control certificate file.
	# control-cert-file: "/etc/nsd/nsd_control.pem"

# Secret keys for TSIGs that secure zone transfers.
# You could include: "secret.keys" and put the 'key:' statements in there,
# and give that file special access control permissions.
#
# key:
	# The key name is sent to the other party, it must be the same
	#name: "keyname"
	# algorithm hmac-md5, or hmac-sha1, or hmac-sha256 (if compiled in)
	#algorithm: hmac-sha256
	# secret material, must be the same as the other party uses.
	# base64 encoded random number.
	# e.g. from dd if=/dev/random of=/dev/stdout count=1 bs=32 | base64
	#secret: "K2tf3TRjvQkVCmJF3/Z9vA=="

key:
    name: ns1-ns2
    algorithm: HMAC-SHA256
    secret: "cpw8J7JOz/KlcVJtTTk3/nt7CY9ZmYnuIh7T8mJr2cA=" # PLEASE CHANGE THIS!

key:
    name: ns1-ns3
    algorithm: HMAC-SHA256
    secret: "oWVOuHeDHJw8ZL8nsBLOKy6DcFUb+dLl1hJFSq2GMKc=" # PLEASE CHANGE THIS!

# Patterns have zone configuration and they are shared by one or more zones.
#
pattern:
	# name by which the pattern is referred to
	name: "signedzones"
	# the zonefile for the zones that use this pattern.
	# if relative then from the zonesdir (inside the chroot).
	# the name is processed: %s - zone name (as appears in zone:name).
	# %1 - first character of zone name, %2 second, %3 third.
	# %z - topleveldomain label of zone, %y, %x next labels in name.
	# if label or character does not exist you get a dot '.'.
	# for example "%s.zone" or "zones/%1/%2/%3/%s" or "secondary/%z/%s"
	zonefile: "master/%s.signed"
	notify-retry: 5
	outgoing-interface: 192.168.0.1
    provide-xfr: 192.168.0.2/32 ns1-ns2
    notify: 192.168.0.2/32 ns1-ns2
    provide-xfr: 192.168.0.3/32 ns1-ns3
    notify: 192.168.0.3/32 ns1-ns3

pattern:
    name: "zones"
    zonefile: "master/%s"
	notify-retry: 5
	outgoing-interface: 192.168.0.1
    provide-xfr: 192.168.0.2/32 ns1-ns2
    notify: 192.168.0.2/32 ns1-ns2
    provide-xfr: 192.168.0.3/32 ns1-ns3
    notify: 192.168.0.3/32 ns1-ns3

